{
    "collab_server" : "",
    "contents" : "---\ntitle: \"The relationship between restaurant geographical distribution and chronic disease outcomes in New York City\"\noutput: \n  flexdashboard::flex_dashboard:\n    orientation: columns\n    vertical_layout: fill\n---\n\n```{r setup, include=FALSE}\nlibrary(tidyverse)\nlibrary(rvest)\nlibrary(httr)\nlibrary(readxl)\nlibrary(data.table)\nlibrary(stringr)\nlibrary(janitor)\nlibrary(stringr)\nlibrary(forcats)\nlibrary(jsonlite)\nlibrary(viridis)\nlibrary(plotly)\nlibrary(ggplot2)\nlibrary(knitr)\n```\n\n```{r New_York_Inspection_data, include=FALSE}\nget_all_inspections = function(url) {\n  \n  all_inspections = vector(\"list\", length = 0)\n  \n  loop_index = 1\n  chunk_size = 50000\n  DO_NEXT = TRUE\n  \n  while (DO_NEXT) {\n    message(\"Getting data, page \", loop_index)\n    \n    all_inspections[[loop_index]] = \n      GET(url,\n          query = list(`$order` = \"zipcode\",\n                       `$limit` = chunk_size,\n                       `$offset` = as.integer((loop_index - 1) * chunk_size)\n                       )\n          ) %>%\n      content(\"text\") %>%\n      fromJSON() %>%\n      as_tibble()\n    \n    DO_NEXT = dim(all_inspections[[loop_index]])[1] == chunk_size\n    loop_index = loop_index + 1\n  }\n  \n  all_inspections\n  \n}\n\nurl = \"https://data.cityofnewyork.us/resource/9w7m-hzhe.json\"\n\nrest_inspection = get_all_inspections(url) %>%\n  bind_rows() \n```\n\n```{r health_data, include=FALSE}\ndownload.file(\"https://www1.nyc.gov/assets/doh/downloads/excel/episrv/2015_CHP_PUD.xlsx\", mode=\"wb\", destfile = \"health.xlsx\")\nhealth <- read_excel(\"health.xlsx\", sheet = \"CHP_all_data\") %>% \n  select(Name, Racewhite_Rate, Poverty, Unemployment,\n         Smoking, Exercise,\n         Obesity, Diabetes, Stroke_Hosp) %>% \n  clean_names() \n```\n\n```{r neighborhood_restaurant, include=FALSE}\nzip_neighbor <- read_csv(\"neigh_zipcode.csv\") %>% \n  mutate(zipcode = as.character(zipcode))\n##restaurant data with neighbourhood\nrest_neighborhood = left_join(rest_inspection, zip_neighbor, by = \"zipcode\") %>% \n  filter(!is.na(neighborhood))\n```\n\n\nColumn {data-width=650}\n-----------------------------------------------------------------------\n\n### Health Data\n\n```{r neighborhood_health}\nhealth_only_neighborhood <- health[-c(1:6),] %>% \n  rename(neighborhood = name) %>% \n  mutate(neighborhood = as.factor(neighborhood))\n\n##Plotting for outcome in different neighborhood\nbar_obe <- health_only_neighborhood %>%\n  mutate(neighborhood = fct_reorder(neighborhood, obesity)) %>% \n  filter(obesity > 25) %>% \n  ggplot(aes(x = neighborhood,y = obesity, fill = neighborhood)) + geom_col() +  \n  theme(axis.text.x = element_text(angle = 45, hjust = 1), \n        legend.position = \"none\") +\n  labs(title = \"Neighborhood with 25 percent or more obesity rate\")\n\nbar_dia <- health_only_neighborhood %>%\n  mutate(neighborhood = fct_reorder(neighborhood, diabetes)) %>% \n  filter(diabetes > 10) %>% \n  ggplot(aes(x = neighborhood,y = diabetes, fill = neighborhood)) + geom_col() +   \n  theme(axis.text.x = element_text(angle = 45, hjust = 1), \n        legend.position = \"none\") +\n  labs(title = \"Neighborhood with 10 percent or more diabetes rate\")\n\nbar_stro <- health_only_neighborhood %>%\n  mutate(neighborhood = fct_reorder(neighborhood, stroke_hosp)) %>% \n  filter(stroke_hosp > 300) %>% \n  ggplot(aes(x = neighborhood,y = stroke_hosp, fill = neighborhood)) + \n  geom_col() +    \n  theme(axis.text.x = element_text(angle = 45, hjust = 1), \n        legend.position = \"none\") +\n  labs(title = \"Neighborhood with 300 or more stroke hospitalization in 100,000 adults\")\n\nggplotly(bar_obe)\nggplotly(bar_dia)\nggplotly(bar_stro)\n```\n\n### Restaurant data\n\n```{r calculating_percentage}\n# calculating the total number of restaurants and the number of fastfood restaurants in the neighborhood, as well as the percentage of fastfood restaurants.\nneighborhood_list = \n  rest_neighborhood %>%\n  distinct(neighborhood) %>%\n  arrange(neighborhood)\n  \nrest_fastfood_neighborhood = \n  rest_neighborhood %>%\n  filter(cuisine_description %in% c(\"Bagels/Pretzels\",\n                                    \"Bottled beverages, including water, sodas, juices, etc.\",\n                                    \"Chicken\",\n                                    \"Delicatessen\",\n                                    \"Donuts\",\n                                    \"Hamburgers\",\n                                    \"Hotdogs\",\n                                    \"Hotdogs/Pretzels\",\n                                    \"Ice Cream, Gelato, Yogurt, Ices\",\n                                    \"Nuts/Confectionary\",\n                                    \"Pancakes/Waffles\",\n                                    \"Pizza\",\n                                    \"Soul Food\",\n                                    \"Sandwiches\",\n                                    \"Sandwiches/Salads/Mixed Buffet\",\n                                    \"Soups & Sandwiches\"))\n\npercent_fastfood_neighborhood = function(name_neighborhood){\n\n  rest_each_neighborhood =\n    rest_neighborhood %>%\n    filter(neighborhood == name_neighborhood) %>%\n    distinct(camis)\n  \n  n_rest_neighborhood = nrow(rest_each_neighborhood)\n\n  rest_fastfood_distinct_neighborhood = \n    rest_fastfood_neighborhood %>%\n    filter(neighborhood == name_neighborhood) %>%\n    distinct(camis, cuisine_description)\n  \n  n_fastfood_neighborhood = nrow(rest_fastfood_distinct_neighborhood)\n    \n  percent_fastfood_neighborhood = n_fastfood_neighborhood/n_rest_neighborhood\n  \n  tibble(\n    neighborhood = name_neighborhood,\n    n_fastfood = n_fastfood_neighborhood,\n    n_rest = n_rest_neighborhood,\n    percent_fastfood = percent_fastfood_neighborhood\n  )\n}\n\nfastfood_neighborhood = \n  map(neighborhood_list$neighborhood, percent_fastfood_neighborhood) %>%\n  bind_rows() %>%\n  mutate(neighborhood = str_to_upper(neighborhood))\n\n# plot for each neighborhood\nfastfood_neighborhood %>%\n  mutate(neighborhood = as.factor(neighborhood),\n         n_rest = as.numeric(n_rest),\n         n_nonfastfood = n_rest - n_fastfood,\n         neighborhood = fct_reorder(neighborhood, percent_fastfood)) %>%\n  plot_ly(., x = ~neighborhood, y = ~n_fastfood, type = 'bar', name = 'fastfood restaurants') %>%\n  add_trace(y = ~n_nonfastfood, name = 'non-fastfood restaurants') %>%\n  layout(yaxis = list(title = 'Number of restaurants'), \n         xaxis = list(title = 'Neighborhood (ordered by percentage of fastfood restaurants)',\n                      showticklabels = FALSE),\n         barmode = 'stack')\n```\n\nColumn {data-width=350}\n-----------------------------------------------------------------------\n\n### Scatterplot between the three chronic disease outcomes and percentage of fastfood restaurants \n\n```{r getting_data_ready_for_analysis, include = FALSE}\nhealth_neighborhood = \n  health %>%\n  mutate(neighborhood = str_to_upper(name)) %>%\n  select(-name)\n\ncombined_fastfood = \n  fastfood_neighborhood %>%\n  mutate(fastfood_percent = percent_fastfood) %>%\n  select(neighborhood, fastfood_percent)\n\ncombined_model =  \n  left_join(combined_fastfood, health_neighborhood, by = \"neighborhood\")\n```\n\n\n```{r, include = FALSE}\nlibrary(broom)\ncombined_model_percent <- combined_model %>%  mutate(obesity_percent = obesity/100,\n                                                     diabetes_percent = diabetes/100,\n                                                     stroke_hosp_percent = stroke_hosp/100)\n```\n\n### Obesity_percent and fastfood_percent\n```{r}\nm <- lm(obesity_percent ~ fastfood_percent, data = combined_model_percent)\nplot1 <- broom::augment(m) %>% \n  plot_ly(x = ~fastfood_percent) %>%\n  add_markers(y = ~obesity_percent , color = I(\"red\"), showlegend = FALSE) %>%\n  add_ribbons(ymin = ~.fitted - 1.96 * .se.fit, \n              ymax = ~.fitted + 1.96 * .se.fit, color = I(\"gray80\"),\n              name = \"95% confidence\") %>%\n  add_lines(y = ~.fitted, color = I(\"steelblue\"), name = \"obesity_percent\")\nplot1\n```\n\n### Diabetes_percent and fastfood_percent\n```{r}\nn <- lm(diabetes_percent ~ fastfood_percent, data = combined_model_percent)\nplot2 <- broom::augment(n) %>% \n  plot_ly(x = ~fastfood_percent) %>%\n  add_markers(y = ~diabetes_percent, color = I(\"yellow\"), showlegend = FALSE) %>%\n  add_ribbons(ymin = ~.fitted - 1.96 * .se.fit, \n              ymax = ~.fitted + 1.96 * .se.fit, color = I(\"gray80\"),\n              name = \"95% confidence\") %>%\n  add_lines(y = ~.fitted, color = I(\"steelblue\"),name = \"diabetes_percent\")\nplot2\n```\n\n### Stroke_hosp_percent and fastfood_percent\n```{r}\no <- lm(stroke_hosp_percent ~ fastfood_percent, data = combined_model_percent)\nplot3 <- broom::augment(o) %>% \n  plot_ly(x = ~fastfood_percent) %>%\n  add_markers(y = ~stroke_hosp_percent, color = I(\"blue\"), showlegend = FALSE) %>%\n  add_ribbons(ymin = ~.fitted - 1.96 * .se.fit, \n              ymax = ~.fitted + 1.96 * .se.fit, color = I(\"gray80\"),\n              name = \"95% confidence\") %>%\n  add_lines(y = ~.fitted, color = I(\"steelblue\"),name = \"stroke_hosp_percent\")\nplot3\n```\n\n\n\n",
    "created" : 1512518230107.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "25|46|60|0|\n62|33|69|0|\n71|45|77|0|\n83|15|120|0|\n121|19|196|0|\n",
    "hash" : "47091631",
    "id" : "FB799EE9",
    "lastKnownWriteTime" : 1512703818,
    "last_content_update" : 1512703818199,
    "path" : "~/Desktop/Columbia/semester 1/Data Science I/<DSFinalWebsite>.github.io/dashboard.Rmd",
    "project_path" : "dashboard.Rmd",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}